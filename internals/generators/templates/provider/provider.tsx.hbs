/**
 *
 * {{properCase name }}Provider
 *
 * Description
 *
 */

import { string, bool, func } from 'prop-types';
import { connect } from 'react-redux';
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}
{{#if wantActionsAndReducer}}
import { useInjectReducer } from 'utils/injectReducer';
{{#if wantAsync}}
import { fetchResultArrayType } from 'types';
import LoadingIndicator from 'components/LoadingIndicator';
import {
	makeSelectLoading,
	makeSelectError,
	makeSelectData,
} from './selectors';
{{else}}	
import makeSelect{{properCase defaultStateName}} from './selectors';
{{/if}}
import reducer from './reducer';
import { KEY } from './constants';
{{/if}}

{{#if wantActionsAndReducer}}
	{{#if wantAsync}}
export const {{properCase name}} = ({ makeRequest, loading, error, data }) => {
	{{else}}
export const {{properCase name }} = ({ makeRequest, {{ camelCase defaultStateName}} }) => {
	{{/if}}
{{else}}
export const {{properCase name}} = () => {
{{/if}}
	{{#if wantActionsAndReducer}}
	useInjectReducer({ key: KEY, reducer });
	{{/if}}

	useEffect(() => {
		makeRequest();
	}, [makeRequest])
	
	// useEffect(() => {
	// 	makeRequest(fetchFunc, params);
	// }, [makeRequest, fetchFunc, params])

	return (
		<div>
			{{#if wantActionsAndReducer}}
			<p>
				{{#if wantAsync}}
					{loading && <LoadingIndicator />}
					{error &&
						(typeof error === 'object' ? (
							Object.keys(error).map(k => <p key={k}>{k}</p>)
						) : (
							<p> {error} </p>
						))}
					{(data?.length &&
						data.map(d => Object.keys(d).map(k => <p key={k}>{k}</p>))) ||
						'No result'}
				{{else}}
					<PrettyJson json={userPreferences} rel={`${KEY} State`} />;				
				{{/if}}
			</p>
			{{/if}}
		</div>
	);
}

{{properCase name}}.propTypes = {
	{{#if wantActionsAndReducer}}
		{{#if wantAsync}}
	loading: bool,
	error: string,
	data: fetchResultArrayType,
		{{else}}			
	{{camelCase defaultStateName}}: string,
		{{/if}}
	{{/if}}
	// onAction: func,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
	{{#if condition}}
	{{camelCase defaultStateName}}: makeSelect{{properCase defaultStateName}}(),		
	{{else}}
	loading: makeSelectLoading(),
	error: makeSelectError(),
	data: makeSelectData(),
	{{/if}}
});
{{else}}
const mapStateToProps = null;
{{/if}}

export const mapDispatchToProps = {
	// onAction: someAction,
	// onAnotherAction: e => someOtherAction(e.target.value),
};

export default connect(mapStateToProps, mapDispatchToProps)({{properCase name}});
