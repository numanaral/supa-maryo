{{#ifCond memo '||' redux}} 
import {{#ifCond memo '&&' redux}}, { 
	memo,
//	useCallback,
} {{else if memo}}, { memo } {{else}} /* , { useCallback } */ {{/ifCond}} from 'react';
{{/ifCond}}
{{#if redux}}
// import { useDispatch, useSelector } from 'react-redux';
{{/if}}
{{#if styled}}
import styled from 'styled-components/macro';
{{/if}}
{{#ifCond propTypes '||' redux}}

	{{#if redux}}
// import {
	{{#each _reduxActions as |action|}}
//	{{action}},
	{{/each}}
// } from 'store/redux/reducers/{{reducerName}}/actions';
// import makeSelect{{properCase reducerName}}s, {
	{{#each _reduxSelectors as |selector|}}
//	makeSelect{{properCase selector}},
	{{/each}}
// } from 'store/redux/reducers/{{reducerName}}/selectors';
	{{/if}}
{{/ifCond}}
{{#if styled}}

const Wrapper = styled.div`
	${({ theme }) => `
		background-color: ${theme.palette.background.paper};
	`}
`;
{{/if}}
{{#if propTypes}}

interface Props {
	{{#each _props as |prop|}}
	{{prop}}: string,
	{{/each}}
}
{{/if}}

const {{properCase name}} = (
{{#if propTypes}}
	{ 
		{{#each _props as |prop|}}
		{{prop}},
		{{/each}}
	}: Props
{{/if}}
) => 
{
{{#if redux}}
	// const dispatch = useDispatch();
	{{#each _reduxActions as |action|}}
	// const dispatch{{properCase action}} = useCallback(
	// 	() => dispatch({{action}}()),
	// 	[dispatch]
	// );
	{{/each}}
	//
	// const {{camelCase reducerName}}s = useSelector(makeSelect{{properCase reducerName}}s());
	{{#each _reduxSelectors as |selector|}}
	// const {{selector}} = useSelector(makeSelect{{properCase selector}}());
	{{/each}}
	
{{/if}}
	return (
	{{#if styled}}
		<Wrapper>
	{{else}}
		<>
	{{/if}}
			<p>{{properCase name}}</p>
		{{#if propTypes}} 
			{{#each _props as |prop|}}
			<p>{{prop}}: ${{curly true}}{{prop}}{{curly}}</p>
			{{/each}}
		{{/if}}
		{{#if redux}}
			{/*
			<p>
			{{camelCase reducerName}}s: <pre>{ {{camelCase reducerName}}s }</pre>
			</p>
			{{#each _reduxSelectors as |selector|}}
			<p>{{selector}}: ${{curly true}}{{selector}}{{curly}}</p>
			{{/each}}
			*/}
		{{/if}}
	{{#if styled}}
		</Wrapper>
	{{else}}
		</>
	{{/if}}
	);
};

{{#if memo}}
export default memo({{properCase name}});
{{else}}
export default {{properCase name}};
{{/if}}
