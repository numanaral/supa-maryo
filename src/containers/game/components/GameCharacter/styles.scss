$spriteBlockSize: 16;
$flipDirection: 'Left';

:root {
	--animation-duration: 0.35s;
}

// [State, LeftSpacingIndex, AnimationStepCount]
/* prettier-ignore */
$stateConfig:
	'Standing' 0 0,
	'Running' 1 3,
	'Jumping' 4 0,
	'Sliding' 5 0,
	'Crouching' 0 0, // No crouching for small character, show Stating instead.
	'Swimming' 6 4,
	'Stomping' 10 2,
	'Dying' 12 0,
	'Firing' 0 0; // No firing for small character, show Stating instead.

@mixin demo {
	&.demo {
		box-shadow: 1px 1px;

		.character {
			overflow: initial;
		}

		&.slow {
			--animation-duration: 3s;
		}
	}
}

.character-wrapper {
	width: #{$spriteBlockSize}px;
	height: #{$spriteBlockSize}px;

	position: absolute;
	z-index: 9999;
	transition-duration: 50ms;
	transition-property: top left;
	transition-timing-function: ease-in-out;

	.character {
		width: #{$spriteBlockSize}px;
		height: #{$spriteBlockSize}px;

		overflow: hidden;
		position: relative;

		.sprite-sheet {
			transition-property: transform;
			position: absolute;
			top: 0;
			left: 0;
		}

		/* Flip if direction is left. */
		&[data-direction='#{$flipDirection}'] {
			transform: scaleX(-1);
		}

		@each $state, $leftSpacingIndex, $animationStepCount in $stateConfig {
			&[data-state='#{$state}'] {
				$leftSpacing: #{$spriteBlockSize * -$leftSpacingIndex};

				.sprite-sheet {
					left: #{$leftSpacing}px;
				}

				@if #{$animationStepCount > 0} {
					--animation-translate-x: #{$spriteBlockSize *
						-$animationStepCount}px;

					.sprite-sheet {
						animation: animate
							var(--animation-duration)
							steps(#{$animationStepCount})
							infinite;
					}
				}
			}
		}
	}

	@include demo;
}

@keyframes animate {
	from {
		transform: translateX(0);
	}
	to {
		transform: translateX(var(--animation-translate-x));
	}
}
